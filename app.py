import streamlit as st
import openai
import json
import sqlite3
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ï–ì–≠ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä",
    page_icon="üìö",
    layout="wide"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
openai.api_key = st.secrets["openai_api_key"]

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('ege_tasks.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS tasks
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  task_number INTEGER,
                  condition TEXT,
                  solution TEXT,
                  answer TEXT,
                  created_at TIMESTAMP)''')
    conn.commit()
    conn.close()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á–∏
def generate_task(task_number):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–í—ã - –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –ï–ì–≠."},
                {"role": "user", "content": f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∑–∞–¥–∞—á—É ‚Ññ{task_number} –ï–ì–≠ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ. "
                                          f"–í–µ—Ä–Ω–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å –ø–æ–ª—è–º–∏: condition (—É—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏), "
                                          f"solution (–ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ), answer (–æ—Ç–≤–µ—Ç)."}
            ]
        )
        
        result = json.loads(response.choices[0].message.content)
        return result["condition"], result["solution"], result["answer"]
    except Exception as e:
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}")
        return None, None, None

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def save_task(task_number, condition, solution, answer):
    conn = sqlite3.connect('ege_tasks.db')
    c = conn.cursor()
    c.execute('''INSERT INTO tasks (task_number, condition, solution, answer, created_at)
                 VALUES (?, ?, ?, ?, ?)''',
              (task_number, condition, solution, answer, datetime.now()))
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞—á
def get_task_history():
    conn = sqlite3.connect('ege_tasks.db')
    c = conn.cursor()
    c.execute('SELECT * FROM tasks ORDER BY created_at DESC')
    tasks = c.fetchall()
    conn.close()
    return tasks

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_db()

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üéØ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–¥–∞—á –ï–ì–≠ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ")

# –í—ã–±–æ—Ä –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è
task_number = st.selectbox(
    "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è:",
    range(1, 20),
    format_func=lambda x: f"–ó–∞–¥–∞–Ω–∏–µ ‚Ññ{x}"
)

# –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É"):
    with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É..."):
        condition, solution, answer = generate_task(task_number)
        
        if condition:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É
            save_task(task_number, condition, solution, answer)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —É—Å–ª–æ–≤–∏–µ
            st.subheader("–£—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏:")
            st.write(condition)
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–µ—à–µ–Ω–∏—è
            if st.button("–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ"):
                st.subheader("–†–µ—à–µ–Ω–∏–µ:")
                st.write(solution)
                st.subheader("–û—Ç–≤–µ—Ç:")
                st.write(answer)

# –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á
st.subheader("–ò—Å—Ç–æ—Ä–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
tasks = get_task_history()

for task in tasks:
    with st.expander(f"–ó–∞–¥–∞–Ω–∏–µ ‚Ññ{task[1]} –æ—Ç {task[5]}"):
        st.write("**–£—Å–ª–æ–≤–∏–µ:**")
        st.write(task[2])
        st.write("**–†–µ—à–µ–Ω–∏–µ:**")
        st.write(task[3])
        st.write("**–û—Ç–≤–µ—Ç:**")
        st.write(task[4]) 
